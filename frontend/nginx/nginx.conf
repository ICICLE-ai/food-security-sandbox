user  nginx;
worker_processes  auto;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;
events {
  worker_connections  4096;
}
http {
  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
  access_log  /var/log/nginx/access.log  main;
  sendfile        on;
  keepalive_timeout  15;

  # Define upstreams
upstream backend_upstream {
  server ${BACKEND_URL} max_fails=3 fail_timeout=30s;
  keepalive 32;
}

upstream sandbox_upstream {
  server ${SANDBOX_URL} max_fails=3 fail_timeout=30s;
  keepalive 32;
}

  server {
    listen       5000;
    server_name  localhost;

    # Add debug headers
    add_header X-Debug-Backend "${BACKEND_URL}" always;
    add_header X-Debug-Sandbox "${SANDBOX_URL}" always;

    # Proxy API requests
    location /api/ {
        proxy_pass https://${BACKEND_URL}/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        
        # Use original host for proper routing
        proxy_set_header Host ${BACKEND_URL};
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        
        # Timeout settings
        proxy_connect_timeout 30s;
        proxy_send_timeout 60s;
        proxy_read_timeout 300s;
        proxy_redirect off;
        
        # SSL settings
        proxy_ssl_verify off;
        proxy_ssl_server_name off;
        
        # Buffering settings
        proxy_buffering on;
        proxy_buffer_size 16k;
        proxy_buffers 8 16k;
        
        # Retry logic
        proxy_next_upstream error timeout invalid_header http_502 http_503 http_504;
        proxy_next_upstream_tries 3;
        proxy_next_upstream_timeout 10s;
        
        # Enhanced logging
        access_log /var/log/nginx/api_access.log main;
        error_log /var/log/nginx/api_error.log debug;
        
        # Handle backend errors
        proxy_intercept_errors on;
        error_page 502 503 504 = @backend_fallback;
    }

    # Fallback location for backend errors
    location @backend_fallback {
        add_header Content-Type application/json always;
        return 503 '{"error": "Backend service unavailable", "message": "Cannot connect to backend at ${BACKEND_URL}"}';
    }

    # Proxy SANDBOX requests
    location /sandbox/ {
        proxy_pass https://${SANDBOX_URL}/sandbox/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host ${SANDBOX_URL};
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 10s;
        proxy_send_timeout 60s;
        proxy_read_timeout 300s;
        proxy_redirect off;
    }

    # Serve static files
    location / {
      root   /app;
      index  index.html;
      try_files $uri $uri/ /index.html;
      
      add_header Cache-Control "no-cache, must-revalidate";
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
      root   /usr/share/nginx/html;
    }
  }
}
